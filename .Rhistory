temp1 <- assign(myfiles[i], read_excel(myfiles[i]))
temp2 <- datasliceT(temp1)
TAGData <- rbind(TAGData, temp2)
}
knitr::opts_chunk$set(echo = FALSE)
##packages list
require("plyr")
require("tidyverse")
require("readxl")
require("broom")
knitr::opts_knit$set(root.dir = setwd(".."))
##ONLY NEED TO RUN ONCE, LOAD DATA FROM THE CSVs
myfiles <- list.files(path="Data", pattern="*.xlsx", full.names=TRUE)
DietList <- c("100N", "0Ile", "25Thr", "0N", "R100N", "R0Ile", "R25Thr", "R0N")
##collecting the TAG data from the spreadsheets
HeadListT <- c("Run", "Diet", "Tag1", "Tag2", "Tag3", "Blank")
TAGData <- data.frame(matrix(vector(),ncol=6))
colnames(TAGData) <- HeadListT
datasliceT <- function(data) {
data <- data[c(10:17),c(2:4,8)]
names(data)[1] <- "Tag1"
names(data)[2] <- "Tag2"
names(data)[3] <- "Tag3"
names(data)[4] <- "Blank"
mutate(data, Diet = DietList) %>%
mutate(Run = myfiles[i]) %>%
select(HeadListT)
}
for (i in 1:length(myfiles)){
temp1 <- assign(myfiles[i], read_excel(myfiles[i]))
temp2 <- datasliceT(temp1)
TAGData <- rbind(TAGData, temp2)
}
knitr::opts_chunk$set(echo = FALSE)
##packages list
require("plyr")
require("tidyverse")
require("readxl")
require("broom")
##ONLY NEED TO RUN ONCE, LOAD DATA FROM THE CSVs
myfiles <- list.files(path="Data", pattern="*.xlsx", full.names=TRUE)
DietList <- c("100N", "0Ile", "25Thr", "0N", "R100N", "R0Ile", "R25Thr", "R0N")
##collecting the TAG data from the spreadsheets
HeadListT <- c("Run", "Diet", "Tag1", "Tag2", "Tag3", "Blank")
TAGData <- data.frame(matrix(vector(),ncol=6))
colnames(TAGData) <- HeadListT
datasliceT <- function(data) {
data <- data[c(10:17),c(2:4,8)]
names(data)[1] <- "Tag1"
names(data)[2] <- "Tag2"
names(data)[3] <- "Tag3"
names(data)[4] <- "Blank"
mutate(data, Diet = DietList) %>%
mutate(Run = myfiles[i]) %>%
select(HeadListT)
}
for (i in 1:length(myfiles)){
temp1 <- assign(myfiles[i], read_excel(myfiles[i]))
temp2 <- datasliceT(temp1)
TAGData <- rbind(TAGData, temp2)
}
TAGData[3:6] <- lapply(TAGData[3:6], as.double)
write.csv(TAGData, "Data/TAGData.csv", row.names = FALSE)
##collecting the Protein data from the spreadsheets
HeadListP <- c("Run", "Diet", "Pro1", "Pro2", "Pro3")
PROData <- data.frame(matrix(vector(),ncol=5))
colnames(PROData) <- HeadListP
datasliceP <- function(data) {
data <- data[c(24:31),c(5:7)]
names(data)[1] <- "Pro1"
names(data)[2] <- "Pro2"
names(data)[3] <- "Pro3"
mutate(data, Diet = DietList) %>%
mutate(Run = myfiles[i]) %>%
select(HeadListP)
}
for (i in 1:length(myfiles)){
temp1 <- assign(myfiles[i], read_excel(myfiles[i]))
temp2 <- datasliceP(temp1)
PROData <- rbind(PROData, temp2)
}
PROData[3:5] <- lapply(PROData[3:5], as.double)
write.csv(PROData, "Data/PROData.csv", row.names = FALSE)
##collecting the TAG standard curves from the spreadsheets
StandListT <- c(0.801484375, 0.4007421875, 0.2003710938, 0.1001855469, 0.05009277344, 0.02504638672, 0.01252319336, 0.00626159668, 0.00313079834, 0)
HeadListST <- c("Run", "Conc", "Abs")
StandTAG <- data.frame(matrix(vector(),ncol=3))
colnames(StandTAG) <- HeadListST
datasliceST <- function(data) {
data1 <- data[c(10),c(10:13)]
data1 <- pivot_longer(data1, 1:4)
data2 <- data[c(11),c(10:13)]
data2 <- pivot_longer(data2, 1:4)
data3 <- data[c(12),c(10:11)]
data3 <- pivot_longer(data3, 1:2)
data <- rbind(data1, data2, data3)
mutate(data, Conc = StandListT) %>%
mutate(Run = myfiles[i]) %>%
rename(Abs = value) %>%
select(HeadListST)
}
for (i in 1:length(myfiles)){
temp1 <- assign(myfiles[i], read_excel(myfiles[i]))
temp2 <- datasliceST(temp1)
StandTAG <- rbind(StandTAG, temp2)
}
StandTAG[2:3] <- lapply(StandTAG[2:3], as.double)
write.csv(StandTAG, "Data/StandTAG.csv", row.names = FALSE)
##collecting the TAG standard curves from the spreadsheets
StandListP <- c(2, 1, 0.5, 0.25, 0.125, 0.0625, 0.0313, 0)
HeadListSP <- c("Run", "Conc", "Abs")
StandPRO <- data.frame(matrix(vector(),ncol=3))
colnames(StandPRO) <- HeadListSP
datasliceSP <- function(data) {
data1 <- data[c(30),c(10:13)]
data1 <- pivot_longer(data1, 1:4)
data2 <- data[c(31),c(10:13)]
data2 <- pivot_longer(data2, 1:4)
data <- rbind(data1, data2)
mutate(data, Conc = StandListP) %>%
mutate(Run = myfiles[i]) %>%
rename(Abs = value) %>%
select(HeadListSP)
}
for (i in 1:length(myfiles)){
temp1 <- assign(myfiles[i], read_excel(myfiles[i]))
temp2 <- datasliceSP(temp1)
StandPRO <- rbind(StandPRO, temp2)
}
StandPRO[2:3] <- lapply(StandPRO[2:3], as.double)
write.csv(StandPRO, "Data/StandPRO.csv", row.names = FALSE)
##Reading in CSVs
TAGData <- read.csv("Data/TAGData.csv")
PROData <- read.csv("Data/PROData.csv")
StandTAG <- read.csv("Data/StandTAG.csv")
StandPRO <- read.csv("Data/StandPRO.csv")
## y = mx + c
## Conc estimate = m = tidy[2,2]
## intercept estimate = c = tidy[1,2]
TAGCurve <- lm(Abs ~ Conc, StandTAG)
TM <- as.double(tidy(TAGCurve)[2,2])
TC <- as.double(tidy(TAGCurve)[1,2])
ggplot(StandTAG, aes(Conc, Abs)) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
labs(y = "Absorbance at 540nm (TAG)",
x = "Concentration of glycerol (mg/mL)")
PROCurve <- lm(Abs ~ Conc, StandPRO)
tidy(PROCurve)
ggplot(StandPRO, aes(Conc, Abs, color = Run)) +
geom_point() +
geom_smooth(se = F) +
labs(y = "Absorbance at 562nm (Protein)",
x = "Concentration of BSA (mg/mL)")
subStandPRO <- StandPRO %>% subset(Conc != "2")
subPROCurve <- lm(Abs ~ Conc, subStandPRO)
ggplot(subStandPRO, aes(Conc, Abs, color = Run)) +
geom_point() +
geom_smooth(se = F) +
labs(y = "Absorbance at 562nm (Protein)",
x = "Concentration of BSA (mg/mL)/nReomved 2mg/mL to improve linearity")
## y = m*x + c
## ~ x = (y-c)/m
TAGData1 <- TAGData %>%
mutate(Rep1 = ((Tag1 - Blank) - TC) / TM) %>%
mutate(Rep2 = ((Tag2 - Blank) - TC) / TM) %>%
mutate(Rep3 = ((Tag3 - Blank) - TC) / TM) %>%
select(Run, Diet, Rep1, Rep2, Rep3) %>%
pivot_longer(cols =  -Diet:-Run) %>%
rename(Replicate = name, Conc = value) %>%
mutate(Rapa = case_when(str_detect(Diet, "R") ~ TRUE,
TRUE ~ FALSE)) %>%
select(Run, Diet, Rapa, Replicate, Conc) %>%
mutate(Conc = Conc*0.25/5)
TAGData1$Diet <- str_remove(TAGData1$Diet, "R")
TAGData1$Rapa <- gsub("TRUE", "Rapa", TAGData1$Rapa)
TAGData1$Rapa <- gsub("FALSE", "NoRapa", TAGData1$Rapa)
TagMean <- TAGData1 %>%
select(Diet, Rapa, Conc) %>%
mutate(Conc = Conc*1000) %>%
group_by(Diet, Rapa) %>%
summarise_each(funs(mean,sd,se=sd(.)/sqrt(n())))
TAGPlot <- ggplot(TagMean, aes(x = Diet, y = mean, fill = Rapa)) +
geom_bar(stat = "identity", position = "dodge") +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.1, position = position_dodge(width=0.9)) +
labs(y = "TAG content in µg / fly",
x = "Pretreatment diet")
TAGPlot
ProMutate <- function(data) {
data %>% mutate(Rep1 = (Pro1 - PC) / PM) %>%
mutate(Rep2 = (Pro2 - PC) / PM) %>%
mutate(Rep3 = (Pro3 - PC) / PM) %>%
select(Run, Diet, Rep1, Rep2, Rep3) %>%
pivot_longer(cols =  -Diet:-Run) %>%
rename(Replicate = name, Conc = value) %>%
mutate(Rapa = case_when(str_detect(Diet, "R") ~ TRUE,
TRUE ~ FALSE)) %>%
select(Run, Diet, Rapa, Replicate, Conc) %>%
mutate(Conc = Conc*0.25/5)
}
HeadListPP <- c("Run", "Diet", "Rapa", "Replicate", "Conc")
PROData1 <- data.frame(matrix(vector(),ncol=5))
colnames(PROData1) <- HeadListPP
for (i in 1:length(myfiles)){
df <- filter(subStandPRO, Run == myfiles[i])
dflm <- lm(Abs ~ Conc, df)
PM <- as.double(tidy(dflm)[2,2])
PC <- as.double(tidy(dflm)[1,2])
df2 <- filter(PROData, Run == myfiles[i])
df2 <- ProMutate(df2)
df2$Diet <- str_remove(df2$Diet, "R")
df2$Rapa <- gsub("TRUE", "Rapa", df2$Rapa)
df2$Rapa <- gsub("FALSE", "NoRapa", df2$Rapa)
PROData1 <- rbind(PROData1, df2)
}
PROMean <- PROData1 %>%
select(Diet, Rapa, Conc) %>%
mutate(Conc = Conc*1000) %>%
group_by(Diet, Rapa) %>%
summarise_each(funs(mean,sd,se=sd(.)/sqrt(n())))
PROPlot <- ggplot(PROMean, aes(x = Diet, y = mean, fill = Rapa)) +
geom_bar(stat = "identity", position = "dodge") +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.1, position = position_dodge(width=0.9)) +
labs(y = "Protein content in µg / fly",
x = "Pretreatment diet")
PROPlot
TAG <- TAGData1 %>% rename(TAGConc = Conc)
PRO <- PROData1 %>% rename(PROConc = Conc)
NormData <- left_join(TAG, PRO, by = c("Run", "Diet", "Rapa", "Replicate")) %>%
mutate(NormConc = TAGConc / PROConc)
NormMean <- NormData %>%
select(Diet, Rapa, NormConc) %>%
mutate(NormConc = NormConc*1000) %>%
group_by(Diet, Rapa) %>%
summarise_each(funs(mean,sd,se=sd(.)/sqrt(n())))
NormPlot <- ggplot(NormMean, aes(x = Diet, y = mean, fill = Rapa)) +
geom_bar(stat = "identity", position = "dodge") +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.1, position = position_dodge(width=0.9)) +
labs(y = "TAG/Protein Ratio",
x = "Pretreatment diet")
NormPlot
lmTAG <- lm(Conc ~ Diet*Rapa, data = TAGData1)
lmTAG.a <- aov(lmTAG)
TukeyHSD(lmTAG.a)
lmPRO <- lm(Conc ~ Diet*Rapa, data = PROData1)
lmPRO.a <- aov(lmPRO)
TukeyHSD(lmPRO.a)
lmNorm <- lm(NormConc ~ Diet*Rapa, data = NormData)
lmNorm.a <- aov(lmNorm)
TukeyHSD(lmNorm.a)
lmTAG <- lm(Conc ~ Diet*Rapa, data = TAGData1)
lmTAG.a <- aov(lmTAG)
lmTAG.a
TukeyHSD(lmTAG.a)
lmPRO <- lm(Conc ~ Diet*Rapa, data = PROData1)
lmPRO.a <- aov(lmPRO)
lmPRO.a
TukeyHSD(lmPRO.a)
lmNorm <- lm(NormConc ~ Diet*Rapa, data = NormData)
lmNorm.a <- aov(lmNorm)
lmNorm.a
TukeyHSD(lmNorm.a)
## y = mx + c
## Conc estimate = m = tidy[2,2]
## intercept estimate = c = tidy[1,2]
TAGCurve <- lm(Abs ~ Conc, StandTAG)
TM <- as.double(tidy(TAGCurve)[2,2])
knitr::opts_chunk$set(echo = FALSE)
##packages list
require("plyr")
require("tidyverse")
require("readxl")
require("broom")
##ONLY NEED TO RUN ONCE, LOAD DATA FROM THE CSVs
myfiles <- list.files(path="Data", pattern="*.xlsx", full.names=TRUE)
DietList <- c("100N", "0Ile", "25Thr", "0N", "R100N", "R0Ile", "R25Thr", "R0N")
##collecting the TAG data from the spreadsheets
HeadListT <- c("Run", "Diet", "Tag1", "Tag2", "Tag3", "Blank")
TAGData <- data.frame(matrix(vector(),ncol=6))
colnames(TAGData) <- HeadListT
datasliceT <- function(data) {
data <- data[c(10:17),c(2:4,8)]
names(data)[1] <- "Tag1"
names(data)[2] <- "Tag2"
names(data)[3] <- "Tag3"
names(data)[4] <- "Blank"
mutate(data, Diet = DietList) %>%
mutate(Run = myfiles[i]) %>%
select(HeadListT)
}
for (i in 1:length(myfiles)){
temp1 <- assign(myfiles[i], read_excel(myfiles[i]))
temp2 <- datasliceT(temp1)
TAGData <- rbind(TAGData, temp2)
}
TAGData[3:6] <- lapply(TAGData[3:6], as.double)
write.csv(TAGData, "Data/TAGData.csv", row.names = FALSE)
##collecting the Protein data from the spreadsheets
HeadListP <- c("Run", "Diet", "Pro1", "Pro2", "Pro3")
PROData <- data.frame(matrix(vector(),ncol=5))
colnames(PROData) <- HeadListP
datasliceP <- function(data) {
data <- data[c(24:31),c(5:7)]
names(data)[1] <- "Pro1"
names(data)[2] <- "Pro2"
names(data)[3] <- "Pro3"
mutate(data, Diet = DietList) %>%
mutate(Run = myfiles[i]) %>%
select(HeadListP)
}
for (i in 1:length(myfiles)){
temp1 <- assign(myfiles[i], read_excel(myfiles[i]))
temp2 <- datasliceP(temp1)
PROData <- rbind(PROData, temp2)
}
PROData[3:5] <- lapply(PROData[3:5], as.double)
write.csv(PROData, "Data/PROData.csv", row.names = FALSE)
##collecting the TAG standard curves from the spreadsheets
StandListT <- c(0.801484375, 0.4007421875, 0.2003710938, 0.1001855469, 0.05009277344, 0.02504638672, 0.01252319336, 0.00626159668, 0.00313079834, 0)
HeadListST <- c("Run", "Conc", "Abs")
StandTAG <- data.frame(matrix(vector(),ncol=3))
colnames(StandTAG) <- HeadListST
datasliceST <- function(data) {
data1 <- data[c(10),c(10:13)]
data1 <- pivot_longer(data1, 1:4)
data2 <- data[c(11),c(10:13)]
data2 <- pivot_longer(data2, 1:4)
data3 <- data[c(12),c(10:11)]
data3 <- pivot_longer(data3, 1:2)
data <- rbind(data1, data2, data3)
mutate(data, Conc = StandListT) %>%
mutate(Run = myfiles[i]) %>%
rename(Abs = value) %>%
select(HeadListST)
}
for (i in 1:length(myfiles)){
temp1 <- assign(myfiles[i], read_excel(myfiles[i]))
temp2 <- datasliceST(temp1)
StandTAG <- rbind(StandTAG, temp2)
}
StandTAG[2:3] <- lapply(StandTAG[2:3], as.double)
write.csv(StandTAG, "Data/StandTAG.csv", row.names = FALSE)
##collecting the TAG standard curves from the spreadsheets
StandListP <- c(2, 1, 0.5, 0.25, 0.125, 0.0625, 0.0313, 0)
HeadListSP <- c("Run", "Conc", "Abs")
StandPRO <- data.frame(matrix(vector(),ncol=3))
colnames(StandPRO) <- HeadListSP
datasliceSP <- function(data) {
data1 <- data[c(30),c(10:13)]
data1 <- pivot_longer(data1, 1:4)
data2 <- data[c(31),c(10:13)]
data2 <- pivot_longer(data2, 1:4)
data <- rbind(data1, data2)
mutate(data, Conc = StandListP) %>%
mutate(Run = myfiles[i]) %>%
rename(Abs = value) %>%
select(HeadListSP)
}
for (i in 1:length(myfiles)){
temp1 <- assign(myfiles[i], read_excel(myfiles[i]))
temp2 <- datasliceSP(temp1)
StandPRO <- rbind(StandPRO, temp2)
}
StandPRO[2:3] <- lapply(StandPRO[2:3], as.double)
write.csv(StandPRO, "Data/StandPRO.csv", row.names = FALSE)
##Reading in CSVs
TAGData <- read.csv("Data/TAGData.csv")
PROData <- read.csv("Data/PROData.csv")
StandTAG <- read.csv("Data/StandTAG.csv")
StandPRO <- read.csv("Data/StandPRO.csv")
## y = mx + c
## Conc estimate = m = tidy[2,2]
## intercept estimate = c = tidy[1,2]
TAGCurve <- lm(Abs ~ Conc, StandTAG)
TM <- as.double(tidy(TAGCurve)[2,2])
TC <- as.double(tidy(TAGCurve)[1,2])
ggplot(StandTAG, aes(Conc, Abs)) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
labs(y = "Absorbance at 540nm (TAG)",
x = "Concentration of glycerol (mg/mL)")
PROCurve <- lm(Abs ~ Conc, StandPRO)
tidy(PROCurve)
ggplot(StandPRO, aes(Conc, Abs, color = Run)) +
geom_point() +
geom_smooth(se = F) +
labs(y = "Absorbance at 562nm (Protein)",
x = "Concentration of BSA (mg/mL)")
subStandPRO <- StandPRO %>% subset(Conc != "2")
subPROCurve <- lm(Abs ~ Conc, subStandPRO)
ggplot(subStandPRO, aes(Conc, Abs, color = Run)) +
geom_point() +
geom_smooth(se = F) +
labs(y = "Absorbance at 562nm (Protein)",
x = "Concentration of BSA (mg/mL)/nReomved 2mg/mL to improve linearity")
## y = m*x + c
## ~ x = (y-c)/m
TAGData1 <- TAGData %>%
mutate(Rep1 = ((Tag1 - Blank) - TC) / TM) %>%
mutate(Rep2 = ((Tag2 - Blank) - TC) / TM) %>%
mutate(Rep3 = ((Tag3 - Blank) - TC) / TM) %>%
select(Run, Diet, Rep1, Rep2, Rep3) %>%
pivot_longer(cols =  -Diet:-Run) %>%
rename(Replicate = name, Conc = value) %>%
mutate(Rapa = case_when(str_detect(Diet, "R") ~ TRUE,
TRUE ~ FALSE)) %>%
select(Run, Diet, Rapa, Replicate, Conc) %>%
mutate(Conc = Conc*0.25/5)
TAGData1$Diet <- str_remove(TAGData1$Diet, "R")
TAGData1$Rapa <- gsub("TRUE", "Rapa", TAGData1$Rapa)
TAGData1$Rapa <- gsub("FALSE", "NoRapa", TAGData1$Rapa)
TagMean <- TAGData1 %>%
select(Diet, Rapa, Conc) %>%
mutate(Conc = Conc*1000) %>%
group_by(Diet, Rapa) %>%
summarise_each(funs(mean,sd,se=sd(.)/sqrt(n())))
TAGPlot <- ggplot(TagMean, aes(x = Diet, y = mean, fill = Rapa)) +
geom_bar(stat = "identity", position = "dodge") +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.1, position = position_dodge(width=0.9)) +
labs(y = "TAG content in µg / fly",
x = "Pretreatment diet")
TAGPlot
ProMutate <- function(data) {
data %>% mutate(Rep1 = (Pro1 - PC) / PM) %>%
mutate(Rep2 = (Pro2 - PC) / PM) %>%
mutate(Rep3 = (Pro3 - PC) / PM) %>%
select(Run, Diet, Rep1, Rep2, Rep3) %>%
pivot_longer(cols =  -Diet:-Run) %>%
rename(Replicate = name, Conc = value) %>%
mutate(Rapa = case_when(str_detect(Diet, "R") ~ TRUE,
TRUE ~ FALSE)) %>%
select(Run, Diet, Rapa, Replicate, Conc) %>%
mutate(Conc = Conc*0.25/5)
}
HeadListPP <- c("Run", "Diet", "Rapa", "Replicate", "Conc")
PROData1 <- data.frame(matrix(vector(),ncol=5))
colnames(PROData1) <- HeadListPP
for (i in 1:length(myfiles)){
df <- filter(subStandPRO, Run == myfiles[i])
dflm <- lm(Abs ~ Conc, df)
PM <- as.double(tidy(dflm)[2,2])
PC <- as.double(tidy(dflm)[1,2])
df2 <- filter(PROData, Run == myfiles[i])
df2 <- ProMutate(df2)
df2$Diet <- str_remove(df2$Diet, "R")
df2$Rapa <- gsub("TRUE", "Rapa", df2$Rapa)
df2$Rapa <- gsub("FALSE", "NoRapa", df2$Rapa)
PROData1 <- rbind(PROData1, df2)
}
PROMean <- PROData1 %>%
select(Diet, Rapa, Conc) %>%
mutate(Conc = Conc*1000) %>%
group_by(Diet, Rapa) %>%
summarise_each(funs(mean,sd,se=sd(.)/sqrt(n())))
PROPlot <- ggplot(PROMean, aes(x = Diet, y = mean, fill = Rapa)) +
geom_bar(stat = "identity", position = "dodge") +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.1, position = position_dodge(width=0.9)) +
labs(y = "Protein content in µg / fly",
x = "Pretreatment diet")
PROPlot
TAG <- TAGData1 %>% rename(TAGConc = Conc)
PRO <- PROData1 %>% rename(PROConc = Conc)
NormData <- left_join(TAG, PRO, by = c("Run", "Diet", "Rapa", "Replicate")) %>%
mutate(NormConc = TAGConc / PROConc)
NormMean <- NormData %>%
select(Diet, Rapa, NormConc) %>%
mutate(NormConc = NormConc*1000) %>%
group_by(Diet, Rapa) %>%
summarise_each(funs(mean,sd,se=sd(.)/sqrt(n())))
NormPlot <- ggplot(NormMean, aes(x = Diet, y = mean, fill = Rapa)) +
geom_bar(stat = "identity", position = "dodge") +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.1, position = position_dodge(width=0.9)) +
labs(y = "TAG/Protein Ratio",
x = "Pretreatment diet")
NormPlot
lmTAG <- lm(Conc ~ Diet*Rapa, data = TAGData1)
lmTAG.a <- aov(lmTAG)
lmTAG.a
TukeyHSD(lmTAG.a)
lmPRO <- lm(Conc ~ Diet*Rapa, data = PROData1)
lmPRO.a <- aov(lmPRO)
lmPRO.a
TukeyHSD(lmPRO.a)
lmNorm <- lm(NormConc ~ Diet*Rapa, data = NormData)
lmNorm.a <- aov(lmNorm)
lmNorm.a
TukeyHSD(lmNorm.a)
## y = mx + c
## Conc estimate = m = tidy[2,2]
## intercept estimate = c = tidy[1,2]
TAGCurve <- lm(Abs ~ Conc, StandTAG)
TM <- as.double(tidy(TAGCurve)[2,2])
TC <- as.double(tidy(TAGCurve)[1,2])
ggplot(StandTAG, aes(Conc, Abs)) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
labs(y = "Absorbance at 540nm (TAG)",
x = "Concentration of glycerol (mg/mL)")
PROCurve <- lm(Abs ~ Conc, StandPRO)
tidy(PROCurve)
ggplot(StandPRO, aes(Conc, Abs, color = Run)) +
geom_point() +
geom_smooth(se = F) +
labs(y = "Absorbance at 562nm (Protein)",
x = "Concentration of BSA (mg/mL)")
subStandPRO <- StandPRO %>% subset(Conc != "2")
subPROCurve <- lm(Abs ~ Conc, subStandPRO)
ggplot(subStandPRO, aes(Conc, Abs, color = Run)) +
geom_point() +
geom_smooth(se = F) +
labs(y = "Absorbance at 562nm (Protein)",
x = "Concentration of BSA (mg/mL)\nReomved 2mg/mL to improve linearity")
